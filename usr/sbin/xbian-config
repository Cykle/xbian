#!/bin/bash
#TODO: Check if packages are already installed
#Check if SD card is already resized

#trap '' 2 

DISABLE_ROOTSSH=0; 
ASK_TO_REBOOT=0;

if [ $(dpkg-query -W -f='${Status}\n' dialog | grep 'not-installed' | wc -l) -eq 1 ]; then
	echo "This program requires the dialog package: apt-get install dialog";
	exit 0;
fi

check_rootssh_status() {
	if [ -f "/etc/ssh/sshd_config" ]; then
		STATUS=$(cat /etc/ssh/sshd_config | grep PermitRootLogin | grep "yes" | wc -l)
		if [ $STATUS -eq 1 ]; then
			DISABLE_ROOTSSH=1;
		else
			DISABLE_ROOTSSH=0;
		fi
	fi
} 

xbianinfo() {
    dialog --title "Xbian Config - Info" --msgbox "This tool provides a straight-forward way of doing initial configuration of Xbian. Although it can be run at any time, some of the options may have difficulties if you have heavily customised your installation." 10 50
	mainmenu;
}

changesdsize() {
	SWAPSIZE=0;
	SWAPEXISTS=$(fdisk /dev/mmcblk0 -l | grep "swap" | awk '{print $1}' | awk '{print substr($0,length,length+1)}');
	PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 2 -d: | awk '{print substr($0,0,length)}')
	SDEND=$(parted /dev/mmcblk0 -ms unit s p | grep "/dev/" | cut -f 2 -d: | awk '{print substr($0,0,length)}');
	SDEND=$(($SDEND-1));
	SDSIZE=$((($SDEND*512)/1024/1024));

	if [ ! -z $SWAPEXISTS ]; then
		swapoff -a
	fi
	
	if [ $SDSIZE -gt 4000 ]; then
		SWAPSIZE=$(((1000*1024*1024)/512));
	elif [ $SDSIZE -gt 2000]; then
		SWAPSIZE=$(((750*1024*1024)/512));
	else
		SWAPSIZE=$(((500*1024*1024)/512));
	fi

	PART_END=$(($SDEND-$SWAPSIZE));
	SWAP_START=$(($PART_END+1));
	SWAP_END=$(($SDEND));
	
	if [ ! -z $SWAPEXISTS ]; then
fdisk /dev/mmcblk0 <<EOF
p
d
2
p
d
3
n
p
2
$PART_START
$PART_END
n
p
3
$SWAP_START
$SWAP_END
t
3
82
p
w
EOF
	else
fdisk /dev/mmcblk0 <<EOF
p
d
2
$PART_START
$PART_END
n
p
3
$SWAP_START
$SWAP_END
t
3
82
p
w
EOF
	fi
	$ASK_FOR_REBOOT=1;
	
	FSEDIT=$(cat /etc/fstab | grep /dev/mmcblk0p3 | grep swap | wc -l);
	
	if [ $FSEDIT -eq 0 ]; then
		echo "/dev/mmcblk0p3	swap	swap	defaults	0	0" >> /etc/fstab
	fi
	
  # now set up an init.d script
	cat > /etc/init.d/resize2fs_once << EOF
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/mmcblk0p2 &&
    rm /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once remove &&
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
  chmod +x /etc/init.d/resize2fs_once &&
  update-rc.d resize2fs_once defaults &&
  dialog --backtitle "Xbian" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n\n  Root partition has been resized. The\n  filesystem will be enlarged upon the\n  next reboot." 11 44
  settings;
}

changetimezone() {
	if [ $(dpkg-query -W -f='${Status}\n' tzdata | grep 'not-installed' | wc -l) -eq 0 ]; then
		dpkg-reconfigure tzdata
	else
		dialog --backtitle "Xbian" --title "Config > Settings > Set timezone" --ok-label Close --msgbox "\n\n\n TZData not installed" 11 44
	fi
	settings;
}

changepass() {
	PASS=$(dialog --backtitle "Xbian" --title "Config > Settings > Change password" --ok-label Change --inputbox "Password:" 10 80 3>&1 1>&2 2>&3)
	if [ $PASS != "" ]; then
		echo "pi:$PASS" | chpasswd
		dialog --backtitle "Xbian" --title "Config > Settings > Change password" --ok-label Close --msgbox "\n\n\n Xbian password succesfully changed" 11 44
	fi
	settings;
	exit 0
} 

changesshroot() {
	if [ $DISABLE_ROOTSSH -eq 0 ]; then
		sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config
		dialog --backtitle "Xbian" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n\n\n SSH root login succesfully enabled" 11 44
	else
		sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
		dialog --backtitle "Xbian" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n\n\n SSH root login succesfully disabled" 11 44
	fi
	settings;
} 

set_config_var() {
  lua - "$1" "$2" "$3" > "$3.bak" << EOF
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
	if line:match("^#?%s*"..key.."=.*$") then
		line=key.."="..value
		made_change=true
	end
	print(line)
end

if not made_change then
	print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}

set_overclock() {
    ASK_TO_REBOOT=1
	set_config_var arm_freq $2 /boot/config.txt &&
	set_config_var core_freq $3 /boot/config.txt &&
	set_config_var sdram_freq $4 /boot/config.txt &&
	set_config_var over_voltage $5 /boot/config.txt &&
	
	# now set up an init.d script
	cat > /etc/init.d/switch_cpu_governor << EOF
#!/bin/sh
### BEGIN INIT INFO
# Provides:          switch_cpu_governor
# Required-Start: udev mountkernfs $remote_fs
# Required-Stop:
# Default-Start: S
# Default-Stop:
# Short-Description: Switch to ondemand cpu governor (unless shift key is pressed)
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
	start)
		log_daemon_msg "Checking if shift key is held down"
		timeout 1 thd --dump /dev/input/event* | grep -q "LEFTSHIFT\|RIGHTSHIFT"
		if [ $? -eq 0 ]; then
			printf " Yes. Not switching scaling governor"
			log_end_msg 0
		else
			SYS_CPUFREQ_GOVERNOR=/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
			[ -e $SYS_CPUFREQ_GOVERNOR ] && echo "ondemand" > $SYS_CPUFREQ_GOVERNOR
			printf " No. Switching to ondemand scaling governor"
			log_end_msg 0
		fi
	;;
	*)
		echo "Usage: $0 start" >&2
		exit 3
	;;
esac
EOF
	
	chmod +x /etc/init.d/switch_cpu_governor &&
	update-rc.d switch_cpu_governor defaults &&
	dialog --backtitle "Xbian" --title "Config > Settings > Overclocking" --ok-label Close --msgbox "\n\n       Set overlock to preset '$1'" 9 50
	settings;
}

changeoverclock() {
	dialog --backtitle "Xbian" --title "Config > Settings > Overclocking" --ok-label Close --msgbox "Be aware that overclocking may reduce the lifetime of your Raspberry Pi. If overclocking at a certain level causes system instability, try a more modest overclock. See http://elinux.org/RPi_Overclocking for more information." 9 65
	
	OVERCLOCK=$(dialog --backtitle "Xbian" --title 'Config > Settings > Overclocking' --ok-label Select --cancel-label Cancel --menu '' 11 80 5 1 "None     700MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt" 2 "Modest   800MHz ARM, 300MHz core, 400MHz SDRAM, 0 overvolt" 3 "Medium   900MHz ARM, 333MHz core, 450MHz SDRAM, 2 overvolt" 4 "High     950MHz ARM, 450MHz core, 450MHz SDRAM, 6 overvolt" 5 "Turbo    1000MHz ARM, 500MHz core, 500MHz SDRAM, 6 overvolt" 3>&1 1>&2 2>&3);
	case "$OVERCLOCK" in
		1)
			set_overclock None 700 250 400 0
		;;
		2)
			set_overclock Modest 800 300 400 0
		;;
		3)
			set_overclock Medium 900 333 450 2
		;;
		4)
			set_overclock High 950 450 450 6
		;;
		5)
			set_overclock Turbo 1000 500 500 6
		;;
		"")
			exit 0;
		;;
		*)
			settings
		;;
	esac
}

settings() {
	check_rootssh_status
	ROOTSSHSTATUS="Enable";
    if [ $DISABLE_ROOTSSH -eq 1 ]; then
        ROOTSSHSTATUS="Disable"
    fi
	
	RETURN=$(dialog --backtitle "Xbian" --title 'Config > Settings' --ok-label Select --cancel-label Return --menu '' 11 80 5 1 "Resize SD - \"Expand root partition to fill SD card\"" 2 "Change Password - \"Change password for 'xbian' user\"" 3 "Set timezone - \"Set the default timezone\"" 4 "SSH root login - \"$ROOTSSHSTATUS SSH root login\"" 5 "Overclocking - \"Configure overclocking\"" 3>&1 1>&2 2>&3)
	case "$RETURN" in
	    2)
			changepass;
		;;
		3)
			changetimezone
		;;
		4)
			changesshroot;
		;;
		5)
			changeoverclock;
		;;
		"")
			mainmenu;
		;;
        *)
			settings;
        ;;
    esac
    exit 0
}

notimplementedyet() {
	dialog --backtitle "Xbian" --title "Config > *" --ok-label Close --msgbox "\n\n             Not implemented yet" 9 50
	mainmenu;
}

#Installs a set of packages
#$1 = Installation file
#$2 = Title of dialogs
installpackage() {

INSTALLS=$1;
TITLE=$2;
#Read package file
PACKAGESAPT=()
PACKAGESAPT=($(cat $INSTALLS | grep 'PackagesApt' | awk '{print substr($0,14,length+1)}'));
PACKAGESDIRECT=()
PACKAGESDIRECT=($(cat $INSTALLS | grep 'PackagesDirect' | awk '{print substr($0,17,length+1)}'));
POSTINSTALL=()
IFS=$'\n';
POSTINSTALL=($(cat $INSTALLS 2>&1 | \
while read X; do \
if [ $(($START)) -eq 1 ]; then awk '{print substr($0,2,length+1)}' <<< $X | sed 's/%PREFIX%/\/tmp\/xbiancache/g'; fi; \
if [[ "$X" == "#PostInstall" && $(($START)) -eq 0 ]]; then START=1; fi; \
done));

dialog --backtitle "Xbian" --title "Config > $TITLE" --infobox "\n\n   Generating packages list..." 7 50
DEPENDENCIES=()
DEPENDENCIES=($(apt-get -s install ${PACKAGESAPT[@]} 2>&1 | \
while read X; do \
grep 'Inst ' <<< $X | awk '{print $2}';\
done));

#Get all dependencies of a apt package
URLS=()
for PACKAGE in "${DEPENDENCIES[@]}"
do
URLS+=("http://archive.raspbian.org/raspbian/$(apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " ")");
done

#Add all custom linkx
for PACKAGE in "${PACKAGESDIRECT[@]}"
do
URLS+=("$PACKAGE");
done

#Get individual file sizes
NRFILE=0;
TOTALFILES=${#URLS[@]};
PKGSIZES=()
PKGSIZES=($(wget --spider ${URLS[@]} 2>&1 | \
while read X; do \
SIZE=$(grep -i 'length' <<< "$X" | awk '{print $2}' | sed 's:^.*[^0-9]\([0-9]*\)$:\1:');\
if [ ! -z $SIZE ]; then echo $SIZE; fi;\
done));

#Calculate total download size
TOTALSIZE=0;
for SIZE in ${PKGSIZES[@]}; do
	TOTALSIZE=$(($(($TOTALSIZE))+$(($SIZE))));
done

BYTESDOWNLOADED=0;
NRFILE=0;
TOTALPERCENT=0;
LIST="";
FIRSTFILE=0;

#Download package and create progress bar
wget -P /tmp/xbiancache/ --progress=bar:force ${URLS[@]} 2>&1 | \
while read -d "%" X; do \
FILE=$(echo "${URLS[$NRFILE]}" | awk -F/ '{print $NF}');\
PROGRESSBAR=$(grep -vi 'http' <<< "$X" | grep -vi 'length');\
BYTES=$(grep '\]' <<< $PROGRESSBAR | awk '{print $3}' | sed 's/,//g' | grep -iv 'K');\
PERCENT=$(grep -iv 'http' <<< $X | sed 's:^.*[^0-9]\([0-9]*\)$:\1:' | grep -iv 'K');\
if [ -z $PERCENT ]; then PERCENT=0; fi;\
if [ $(($PERCENT)) -eq 100 ]; then if [ $(($NRFILE+1)) -lt $TOTALFILES ]; then BYTESDOWNLOADED=$(($(($BYTESDOWNLOADED))+$((${PKGSIZES[$NRFILE]})))); TOTALPERCENT=$((($(($BYTESDOWNLOADED))*100)/$TOTALSIZE)); BYTES=0; NRFILE=$(($NRFILE+1)); FILE=$(echo "${URLS[$NRFILE]}" | awk -F/ '{print $NF}'); LIST="  Currently downloading:\n  $FILE ($(($NRFILE+1))/$TOTALFILES)"; PERCENT=0; else TOTALPERCENT=100; BYTESDOWNLOADED=$(($(($BYTESDOWNLOADED))+$((${PKGSIZES[$NRFILE]})))); fi; else TOTALPERCENT=$(((($(($BYTESDOWNLOADED))+$(($BYTES)))*100)/$TOTALSIZE)); fi;\
if [[ $FIRSTFILE -eq 0 && $(($PERCENT)) -eq 0 ]]; then LIST="  Currently downloading:\n  $FILE ($(($NRFILE+1))/$TOTALFILES)"; FIRSTFILE=1; fi;\
cat <<EOF
XXX
$TOTALPERCENT
\n$LIST $PERCENT%\n\n\n  Total percentage done ($(($(($BYTESDOWNLOADED))+$(($BYTES))))/$TOTALSIZE):\n 
XXX
EOF
done | dialog --title "Config > $TITLE" --gauge "\n   Please wait..." 11 70 0;
sleep 1
dialog --backtitle "Xbian" --title "Config > $TITLE" --infobox "\n\n   All packages downloaded." 7 50
sleep 1;

#Install all apt packages
NRPACKAGES=${#DEPENDENCIES[@]};
CURRENTPACKAGE=1;
#Install apt packages
for PACKAGE in "${DEPENDENCIES[@]}"
do
FILE=$(apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " " | awk -F/ '{print $NF}');
dialog --backtitle "Xbian" --title "Config > $TITLE" --infobox "\n Installing package ($CURRENTPACKAGE/$NRPACKAGES):\n $FILE." 7 50
dpkg -i "/tmp/xbiancache/"$FILE >/dev/null;
sleep 1;
CURRENTPACKAGE=$(($CURRENTPACKAGE+1));
done

#Post installation
NRSTEPS=${#POSTINSTALL[@]};
CURRENTSTEP=1;
for STEP in "${POSTINSTALL[@]}"
do
dialog --backtitle "Xbian" --title "Config > $TITLE" --infobox "\n Post installation ($CURRENTSTEP/$NRSTEPS):\n $STEP" 7 60
CURRENTSTEP=$(($CURRENTSTEP+1));
eval "$STEP";
done

sleep 1;
dialog --backtitle "Xbian" --title "Config > $TITLE" --msgbox "\n   Installation complete." 7 50

#Remove download directory
rm -rf /tmp/xbiancache
}

packages() {
	if [ ! -d "/tmp/xbianpackages" ]; then
		dialog --backtitle "Xbian" --title "Config > Packages" --infobox "\n\n   Downloading package list..." 7 50
		git clone -q --depth 5 https://github.com/Koenkk/packages.git /tmp/xbianpackages
		chmod +x /tmp/xbianpackages/*.sh
	fi
	
	PKGLIST=($(ls -l /tmp/xbianpackages | grep -iv 'README.md' | awk '{print $9}' | awk '!/^[:space:]*$/'));
	LIST=();
	NRITEMS=0;
	for ITEM in ${PKGLIST[@]}
	do
		NRITEMS=$(($NRITEMS+1));
		DESC=$(cat /tmp/xbianpackages/$ITEM | grep "Description" | awk '{print substr($0,15,length)}');
		ITEM=$(sed 's/\<./\u&/g' <<< $ITEM | cut -f 1 -d.);
		if [ ${#ITEM} -gt 6 ]; then
			ITEM=$(echo -e "$ITEM\t\"$DESC\"");
		else
			ITEM=$(echo -e "$ITEM\t\t\"$DESC\"");
		fi
		LIST+=($NRITEMS "$ITEM");
	done
	RETURN=$(dialog --no-kill --backtitle "Xbian" --title 'Config > Packages' --no-collapse --ok-label Install --cancel-label Return --menu '' 11 80 ${NRITEMS} "${LIST[@]}" 3>&1 1>&2 2>&3);
	if [[ ! -z $RETURN && $RETURN -gt 0 ]]; then
		dialog --no-kill --backtitle "Xbian" --title 'Config > Packages' --yesno '\n  Are you sure you want to install this package?' 7 60;
		case "$?" in
			0) 
				RETURN=$(($RETURN-1));
				dialog --backtitle "Xbian" --title "Config > Packages" --msgbox "The installation can take a while depending on the number of packages being downloaded, the installation steps, you're internet connection speed, and any other programs that are running (e.g. XBMC). So please wait patiently..." 9 50
				installpackage "/tmp/xbianpackages/${PKGLIST[$RETURN]}" "Packages"
				packages;
			;;
			*)
				packages;
			;;
		esac
	else
		mainmenu;
	fi
	exit 0;
}

mainmenu() {
    RETURN=$(dialog --no-kill --backtitle "Xbian" --title 'Config' --ok-label Select --cancel-label Exit  --menu '' 11 80 5 1 "Info - \"Information about this tool\"" 2 "Settings - \"Change various system settings\"" 3 "Packages - \"Install or remove packages\"" 4 "Update - \"Check for Xbian Updates\"" 3>&1 1>&2 2>&3)
    
    case "$RETURN" in
		1)
			xbianinfo;
	    ;;
		2)
			settings;
		;;
		3)
			packages;
		;;
		4)
			notimplementedyet;
		;;
		"")
			if [ $ASK_TO_REBOOT -eq 1 ]; then
				REBOOT=$(dialog --backtitle "Xbian" --title "Reboot?" --ok-label Reboot --cancel-label Exit --yesno "\n\n  A reboot is required. Do you want to reboot now?" 9 55 3>&1 1>&2 2>&3)
				case "$REBOOT" in
					1)
						rm -rf /tmp/xbianpackages
						rm -rf /tmp/xbiancache
						reboot;
					;;
					0)
						rm -rf /tmp/xbianpackages
						rm -rf /tmp/xbiancache
						exit 0;
					;;
				esac
			else
				rm -rf /tmp/xbianpackages
				rm -rf /tmp/xbiancache
				exit 0;
			fi
		;;
		*)
			mainmenu
	    ;;
    esac
    exit 0
}
mainmenu;
